Here are the modified C programs where input is taken from the user.

(a) Matrix Multiplication using Multithreading

Each thread computes a single element in the resulting matrix.

#include <stdio.h>
#include <pthread.h>

#define SIZE 2  // Matrix size

int A[SIZE][SIZE], B[SIZE][SIZE], C[SIZE][SIZE];

typedef struct {
    int row, col;
} ThreadData;

void* multiply(void* arg) {
    ThreadData* data = (ThreadData*)arg;
    int sum = 0;
    for (int i = 0; i < SIZE; i++) {
        sum += A[data->row][i] * B[i][data->col];
    }
    C[data->row][data->col] = sum;
    pthread_exit(NULL);
}

int main() {
    printf("Enter elements of first matrix (%d x %d):\n", SIZE, SIZE);
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            scanf("%d", &A[i][j]);

    printf("Enter elements of second matrix (%d x %d):\n", SIZE, SIZE);
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            scanf("%d", &B[i][j]);

    pthread_t threads[SIZE][SIZE];
    ThreadData threadData[SIZE][SIZE];

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            threadData[i][j].row = i;
            threadData[i][j].col = j;
            pthread_create(&threads[i][j], NULL, multiply, &threadData[i][j]);
        }
    }

    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            pthread_join(threads[i][j], NULL);

    printf("Resultant Matrix:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++)
            printf("%d ", C[i][j]);
        printf("\n");
    }

    return 0;
}

(b) Sorting Even and Odd Numbers in Separate Threads & Finding Averages

#include <stdio.h>
#include <pthread.h>

#define MAX_SIZE 100

int arr[MAX_SIZE], even[MAX_SIZE], odd[MAX_SIZE];
int size, evenCount = 0, oddCount = 0;
double evenAvg = 0, oddAvg = 0;

void* sort_even(void* arg) {
    for (int i = 0; i < evenCount - 1; i++) {
        for (int j = 0; j < evenCount - i - 1; j++) {
            if (even[j] > even[j + 1]) {
                int temp = even[j];
                even[j] = even[j + 1];
                even[j + 1] = temp;
            }
        }
    }
    pthread_exit(NULL);
}

void* sort_odd(void* arg) {
    for (int i = 0; i < oddCount - 1; i++) {
        for (int j = 0; j < oddCount - i - 1; j++) {
            if (odd[j] > odd[j + 1]) {
                int temp = odd[j];
                odd[j] = odd[j + 1];
                odd[j + 1] = temp;
            }
        }
    }
    pthread_exit(NULL);
}

void* compute_average(void* arg) {
    int sumEven = 0, sumOdd = 0;
    for (int i = 0; i < evenCount; i++) sumEven += even[i];
    for (int i = 0; i < oddCount; i++) sumOdd += odd[i];
    evenAvg = (evenCount > 0) ? (double)sumEven / evenCount : 0;
    oddAvg = (oddCount > 0) ? (double)sumOdd / oddCount : 0;
    pthread_exit(NULL);
}

int main() {
    printf("Enter number of elements: ");
    scanf("%d", &size);

    printf("Enter %d elements: ", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
        if (arr[i] % 2 == 0) even[evenCount++] = arr[i];
        else odd[oddCount++] = arr[i];
    }

    pthread_t t1, t2, t3;
    pthread_create(&t1, NULL, sort_even, NULL);
    pthread_create(&t2, NULL, sort_odd, NULL);
    pthread_create(&t3, NULL, compute_average, NULL);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
    pthread_join(t3, NULL);

    printf("Sorted Even: ");
    for (int i = 0; i < evenCount; i++) printf("%d ", even[i]);
    printf("\nSorted Odd: ");
    for (int i = 0; i < oddCount; i++) printf("%d ", odd[i]);
    printf("\nEven Avg: %.2f, Odd Avg: %.2f\n", evenAvg, oddAvg);

    return 0;
}

(c) Merge Sort using Multithreading

#include <stdio.h>
#include <pthread.h>

#define MAX_SIZE 100

int arr[MAX_SIZE], size;

void merge(int left, int mid, int right) {
    int i = left, j = mid + 1, k = 0;
    int temp[right - left + 1];

    while (i <= mid && j <= right)
        temp[k++] = (arr[i] < arr[j]) ? arr[i++] : arr[j++];

    while (i <= mid) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];

    for (i = left, k = 0; i <= right; i++, k++) arr[i] = temp[k];
}

void* merge_sort(void* arg) {
    int* bounds = (int*)arg;
    int left = bounds[0], right = bounds[1];

    if (left < right) {
        int mid = (left + right) / 2;
        int left_part[] = {left, mid}, right_part[] = {mid + 1, right};

        pthread_t t1, t2;
        pthread_create(&t1, NULL, merge_sort, left_part);
        pthread_create(&t2, NULL, merge_sort, right_part);

        pthread_join(t1, NULL);
        pthread_join(t2, NULL);
        merge(left, mid, right);
    }

    pthread_exit(NULL);
}

int main() {
    printf("Enter number of elements: ");
    scanf("%d", &size);

    printf("Enter %d elements: ", size);
    for (int i = 0; i < size; i++) scanf("%d", &arr[i]);

    pthread_t t;
    int bounds[] = {0, size - 1};
    pthread_create(&t, NULL, merge_sort, bounds);
    pthread_join(t, NULL);

    printf("Sorted Array: ");
    for (int i = 0; i < size; i++) printf("%d ", arr[i]);
    printf("\n");

    return 0;
}

(d) Checking Palindrome Strings using Multithreading

#include <stdio.h>
#include <string.h>
#include <pthread.h>

#define MAX_SIZE 100

char words[MAX_SIZE][100];
int results[MAX_SIZE], size;

void* check_palindrome(void* arg) {
    int index = *(int*)arg;
    char* str = words[index];
    int len = strlen(str), isPalindrome = 1;

    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - i - 1]) {
            isPalindrome = 0;
            break;
        }
    }

    results[index] = isPalindrome;
    pthread_exit(NULL);
}

int main() {
    printf("Enter number of strings: ");
    scanf("%d", &size);

    printf("Enter %d strings:\n", size);
    for (int i = 0; i < size; i++) scanf("%s", words[i]);

    pthread_t threads[MAX_SIZE];
    int indices[MAX_SIZE];

    for (int i = 0; i < size; i++) {
        indices[i] = i;
        pthread_create(&threads[i], NULL, check_palindrome, &indices[i]);
    }

    for (int i = 0; i < size; i++) {
        pthread_join(threads[i], NULL);
        printf("\"%s\" is %s palindrome\n", words[i], results[i] ? "a" : "not a");
    }

    return 0;
}