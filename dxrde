Here are implementations for each of the three Interprocess Communication (IPC) problems using C:

1. IPC using Pipes (Parent-Child Communication)

Steps:
	•	The parent process sends a file path through a pipe.
	•	The child process reads the file path, retrieves the file contents, and sends them back through another pipe.
	•	The parent process reads and displays the file contents.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>

#define MAX_SIZE 1024

int main() {
    int pipe1[2], pipe2[2];
    pid_t pid;
    char filepath[MAX_SIZE], buffer[MAX_SIZE];

    if (pipe(pipe1) == -1 || pipe(pipe2) == -1) {
        perror("Pipe creation failed");
        exit(1);
    }

    pid = fork();
    
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (pid > 0) {  // Parent process
        close(pipe1[0]);  // Close read end of first pipe
        close(pipe2[1]);  // Close write end of second pipe

        printf("Enter the file path: ");
        scanf("%s", filepath);
        write(pipe1[1], filepath, strlen(filepath) + 1);
        close(pipe1[1]);  // Close write end after sending data

        read(pipe2[0], buffer, sizeof(buffer));
        printf("File Contents:\n%s\n", buffer);
        close(pipe2[0]);

    } else {  // Child process
        close(pipe1[1]);  // Close write end of first pipe
        close(pipe2[0]);  // Close read end of second pipe

        read(pipe1[0], filepath, sizeof(filepath));
        close(pipe1[0]);  // Close read end after receiving data

        int fd = open(filepath, O_RDONLY);
        if (fd < 0) {
            perror("File opening failed");
            exit(1);
        }

        read(fd, buffer, sizeof(buffer));
        close(fd);

        write(pipe2[1], buffer, strlen(buffer) + 1);
        close(pipe2[1]);
    }

    return 0;
}

2. IPC using Named Pipes (FIFOs)

Steps:
	•	The first process takes a sentence from the user and writes it to a FIFO.
	•	The second process reads the sentence, calculates character, word, and line counts, and writes the statistics to a text file.
	•	The second process then sends the file contents back through another FIFO.
	•	The first process reads and displays the statistics.

Process 1 (Writer)

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

#define FIFO1 "fifo1"
#define FIFO2 "fifo2"
#define MAX_SIZE 1024

int main() {
    char sentence[MAX_SIZE], buffer[MAX_SIZE];
    int fd;

    mkfifo(FIFO1, 0666);
    mkfifo(FIFO2, 0666);

    printf("Enter a sentence: ");
    fgets(sentence, MAX_SIZE, stdin);

    fd = open(FIFO1, O_WRONLY);
    write(fd, sentence, strlen(sentence) + 1);
    close(fd);

    fd = open(FIFO2, O_RDONLY);
    read(fd, buffer, sizeof(buffer));
    printf("Statistics:\n%s\n", buffer);
    close(fd);

    unlink(FIFO1);
    unlink(FIFO2);

    return 0;
}

Process 2 (Reader & Processor)

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

#define FIFO1 "fifo1"
#define FIFO2 "fifo2"
#define OUTPUT_FILE "stats.txt"
#define MAX_SIZE 1024

int main() {
    char buffer[MAX_SIZE], result[MAX_SIZE];
    int fd, chars = 0, words = 1, lines = 1;

    fd = open(FIFO1, O_RDONLY);
    read(fd, buffer, sizeof(buffer));
    close(fd);

    for (int i = 0; buffer[i] != '\0'; i++) {
        chars++;
        if (buffer[i] == ' ')
            words++;
        if (buffer[i] == '\n')
            lines++;
    }

    snprintf(result, sizeof(result), "Characters: %d\nWords: %d\nLines: %d\n", chars, words, lines);

    fd = open(OUTPUT_FILE, O_WRONLY | O_CREAT, 0666);
    write(fd, result, strlen(result) + 1);
    close(fd);

    fd = open(FIFO2, O_WRONLY);
    write(fd, result, strlen(result) + 1);
    close(fd);

    return 0;
}

3. Producer-Consumer using Shared Memory

Steps:
	•	The producer generates numbers and stores them in shared memory.
	•	The consumer reads the numbers from shared memory, computes the sum, and displays it.

Producer Process

#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>

#define SHM_SIZE 1024

int main() {
    key_t key = ftok("shmfile", 65);
    int shmid = shmget(key, SHM_SIZE, 0666 | IPC_CREAT);
    int *data = (int *)shmat(shmid, (void *)0, 0);

    printf("Producer: Enter 5 numbers: ");
    for (int i = 0; i < 5; i++) {
        scanf("%d", &data[i]);
    }
    data[5] = -1;  // End marker

    shmdt(data);
    return 0;
}

Consumer Process

#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024

int main() {
    key_t key = ftok("shmfile", 65);
    int shmid = shmget(key, SHM_SIZE, 0666);
    int *data = (int *)shmat(shmid, (void *)0, 0);

    int sum = 0, i = 0;
    printf("Consumer: Received numbers: ");
    while (data[i] != -1) {
        printf("%d ", data[i]);
        sum += data[i++];
    }
    printf("\nSum = %d\n", sum);

    shmdt(data);
    shmctl(shmid, IPC_RMID, NULL);
    return 0;
}

How to Compile and Run:

For Pipes (Parent-Child)

gcc pipe_ipc.c -o pipe_ipc
./pipe_ipc

For Named Pipes (FIFOs)

Run the first process (writer) in one terminal:

gcc fifo_writer.c -o writer
./writer

Run the second process (reader) in another terminal:

gcc fifo_reader.c -o reader
./reader

For Shared Memory

Run the producer first:

gcc producer.c -o producer
./producer

Then, run the consumer:

gcc consumer.c -o consumer
./consumer

These implementations efficiently demonstrate IPC using Pipes, Named Pipes (FIFOs), and Shared Memory. Let me know if you need modifications or explanations!